package gov.epa.run_from_java.data_loading;

import java.util.Hashtable;

import org.apache.commons.text.StringEscapeUtils;

import gov.epa.databases.dev_qsar.exp_prop.entity.LiteratureSource;
import gov.epa.databases.dev_qsar.exp_prop.entity.PublicSource;
import gov.epa.databases.dev_qsar.exp_prop.entity.SourceChemical;


public class ExperimentalRecord {

	public String id_physchem;//	Autonumbered record number for physchem data (generated by database later)
//	public String id_record_source;//	Record number for reference that the physchem data came from (generated by database later- may only need for records from journal articles)
//	public Long id_source_database; //main id number from the database it came from such as toxval_id- TODO should we store in experimental_parameters instead?
	
	//Source chemical fields:
	public String comboID;//
	public String casrn;//Chemical abstracts service number (only if provided by the reference)
	public String einecs;
	public String chemical_name;//	Most systematic name (only if provided in the reference)
	public String synonyms;//	Pipe deliminated synonyms (only if provided in the reference)
	public String smiles;//Simplified Molecular Input Line Entry System for molecular structure (only if provided in the reference)
	
	public String property_name;//	Name of the property (use  "options_property_names" lookup table to consistently populate the field)

	public String property_category;//keep?
	
	
	
	//Property value fields:
	public String property_value_string;//Store original string from source for checking later
	public Double property_value_min_original;//The minimum value of a property when a range of values is given
	public Double property_value_max_original;//The maximum value of a property when a range of values is given
	public Double property_value_point_estimate_original;// Point estimate of the property (when a single value is given)
	public String property_value_units_original;//The units for the property value (convert to defined values in ExperimentalConstants class)

	//Converted property value fields:
	public String property_value_numeric_qualifier;// >, <, or ~
	public Double property_value_min_final;//The minimum value of a property when a range of values is given
	public Double property_value_max_final;//The maximum value of a property when a range of values is given
	public Double property_value_point_estimate_final;// Point estimate of the property (when a single value is given)
	public String property_value_units_final;//The units for the property value (convert to defined values in ExperimentalConstants class)
	public String property_value_qualitative;// Valid qualitative data: solubility descriptor, appearance
	
	//Conditions:
	public Double temperature_C;//The temperature in C that the property is measured at (vapor pressure might be given at 23 C for example)
	public String pressure_mmHg;//The pressure in kPa that the property is measured at (important for boiling points for example)
	public String pH;
	public String measurement_method;//	The experimental method used to measure the property
	public String reliability;
	
	public Hashtable <String,Object> experimental_parameters=null;//TODO should we store above conditions in this hashtable directly?
		
	public String dsstox_substance_id; //DSSTox substance identifier
	public String dsstox_compound_id; //DSSTox substance identifier
	public String note;//	Any additional note

	public String url;
	public String source_name;//use Experimental constants
	public String original_source_name;//If specific reference/paper provided ==> when loading it creates an entry for original public_source
	public String document_name;
	public String file_name;

	public String reference;//keep?
	public LiteratureSource literatureSource;
	public PublicSource publicSourceOriginal;

	//"original_source_name" rather than "source_name_original" to avoid syntactic confusion with "*_original" vs "*_final" fields above
	public String fr_id;
	public String date_accessed;//use Experimental constants
	
	public boolean keep=true;//Does the record contain useful data? keep might be different depending on whether goal is for database or for QSAR data set
	public boolean flag=false;
	public String reason;//If keep=false or flag=true, why?
	
	
	public SourceChemical getSourceChemical(String lanId,PublicSource publicSource,LiteratureSource literatureSource) {
		SourceChemical sourceChemical = new SourceChemical();
		sourceChemical.setCreatedBy(lanId);

		if (casrn!=null && !casrn.isBlank()) {
			sourceChemical.setSourceCasrn(casrn);
		}

		if (chemical_name!=null && !chemical_name.isBlank()) {
			sourceChemical.setSourceChemicalName(chemical_name);
		}

		if (smiles!=null && !smiles.isBlank()) {
			sourceChemical.setSourceSmiles(smiles);
		}

		if (dsstox_substance_id!=null && !dsstox_substance_id.isBlank()) {
			if (dsstox_substance_id.startsWith("DTXCID")) {
				sourceChemical.setSourceDtxcid(dsstox_substance_id);
			} else if (dsstox_substance_id.startsWith("DTXSID")) {
				sourceChemical.setSourceDtxsid(dsstox_substance_id);
			} else if (dsstox_substance_id.startsWith("DTXRID")) {
				sourceChemical.setSourceDtxrid(dsstox_substance_id);
			}
		}
		
		sourceChemical.setLiteratureSource(literatureSource);
		sourceChemical.setPublicSource(publicSource);
		return sourceChemical;

	}
	
	public static String fixCASLeadingZero(String cas) {
		if (cas!=null && !cas.isBlank()) {
			cas=cas.trim();
			while (cas.substring(0,1).contentEquals("0")) {//trim off zeros at front
				cas=cas.substring(1,cas.length());
			}
			return cas;
		} else {
			return null;
		}
	}
	
	public void setComboID(String del) {
		String CAS=casrn;
		
		if (CAS==null || CAS.trim().isEmpty()) CAS="casrn=null";//need placeholder so dont get spurious match in chemreg
		else {
			CAS=fixCASLeadingZero(CAS);
		}
		String name=StringEscapeUtils.escapeJava(chemical_name);
		
		String EINECS=einecs;
		if (EINECS==null || EINECS.trim().isEmpty()) EINECS="einecs=null";//need placeholder so dont get spurious match in chemreg
		EINECS=EINECS.trim();
		
		if (name==null || name.trim().isEmpty()) name="name=null";//need placeholder so dont get spurious match in chemreg
		name=name.trim();
		
		String SMILES=smiles;
		if (SMILES==null || SMILES.trim().isEmpty()) SMILES="smiles=null";//need placeholder so dont get spurious match in chemreg
		SMILES=SMILES.trim();
				
		String DTXSID=dsstox_substance_id;
		if(DTXSID==null) DTXSID="dtxsid=null";

		String DTXCID=dsstox_compound_id;
		if(DTXCID==null) DTXCID="dtxcid=null";

		//TODO omit chemicals where smiles indicates bad element....
		
		comboID=CAS+del+EINECS+del+name+del+SMILES+del+DTXSID+del+DTXCID;
		
	}
}
